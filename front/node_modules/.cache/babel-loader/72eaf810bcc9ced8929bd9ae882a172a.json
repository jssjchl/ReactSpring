{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactSpring\\\\front\\\\src\\\\component\\\\user\\\\UserListComponent.jsx\";\nimport React, { Component } from \"react\";\nimport ApiService from \"../../ApiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserListComponent extends Component {\n  constructor(props) {\n    //component의 생성자 선언할 때 사용함\n    //props는 상위 컴포넌트에서 전달해주는 속성값, props를 이용해 초기 상태값을 만들 때 constructor가 유용\n    //생성자 내에서는 구독작업이나 외부API를 호출하면 안됌,\n    super(props); // 권고하는 방식의 생성자 구현, this.props는 생성자 내에서 정의되지 않아 버그 발생 가능성 생김\n\n    this.reloadUserList = () => {\n      //유저리스트 불러오기\n      ApiService.fetchUsers() //axios == api 통신 사용 프로토콜?\n      .then(res => {\n        this.setState({\n          users: res.data\n        });\n      }).catch(err => {\n        console.log(\"reloadUserList() Errors!\", err);\n      });\n    };\n\n    this.deleteUser = userID => {\n      //유저 삭제\n      ApiService.deleteUser(userID) //api통신을 통해 DB에 있는 유저 삭제\n      .then(res => {\n        this.setState({\n          message: 'User Deleted Successfully.'\n        });\n        this.setState({\n          users: this.state.users.filter(user => user.id !== userID) //filter 기능을 통해 state에 있는 user배열에서 삭제된 해당 유저 id를 제외하고 다시 배열에 노출\n\n        });\n      }).catch(err => {\n        console.log(\"deleteUser() Error!\", err);\n      });\n    };\n\n    this.editUser = ID => {\n      window.localStorage.setItem(\"userID\", ID); //browser의 localstorage를 사용해 해당 유저 id를 일시적으로 저장, route를 통해 EditUserComponent.jsx로 이동\n\n      this.props.history.push(\"/edit-user\"); //route에서 /edit-user url로 이동하면 EditUserComponent.jsx 노출하도로 설정\n    };\n\n    this.addUser = () => {\n      window.localStorage.removeItem(\"userID\");\n      this.props.history.push('/add-user');\n    };\n\n    this.state = {\n      //생성자 내에서는 setState의 호출이 아닌 this.state를 통해 초기값을 할당해줘야함\n      //생성자는 this.state를 직접 할당할 수 있지만 다른 곳에선 this.setState()를 사용\n      users: [],\n      message: null\n    };\n  }\n\n  componentDidMount() {\n    //외부 API호출이 필요하면 사용함, 비동기통신, DOM 요소에 접근할 때\n    this.reloadUserList();\n  }\n\n  render() {\n    //컴포넌트를 정의할 때 무조건 사용해야한다.\n    //render함수 내부에서 setState를 호출하면 안됌 ==무한루프에 빠지게 함\n    //render함수 반환값은 속성값과 상태값만으로 결정되야함\n    //부수효과를 발생시키면 안됌 , 순수하게 렌더링만== 비동기 통신이안 쿠키사용 등\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.addUser,\n        children: \"Add User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"FirstName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"LastName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Age\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Salary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.firstName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.lasgtName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.age\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.salary\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => this.editUser(user.id),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => this.deleteUser(user.id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this)]\n          }, user.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default UserListComponent;","map":{"version":3,"sources":["D:/ReactSpring/front/src/component/user/UserListComponent.jsx"],"names":["React","Component","ApiService","UserListComponent","constructor","props","reloadUserList","fetchUsers","then","res","setState","users","data","catch","err","console","log","deleteUser","userID","message","state","filter","user","id","editUser","ID","window","localStorage","setItem","history","push","addUser","removeItem","componentDidMount","render","map","firstName","lasgtName","email","age","salary"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ApiService from \"../../ApiService\";\r\n\r\nclass UserListComponent extends Component {\r\n  constructor(props) {\r\n    //component의 생성자 선언할 때 사용함\r\n    //props는 상위 컴포넌트에서 전달해주는 속성값, props를 이용해 초기 상태값을 만들 때 constructor가 유용\r\n    //생성자 내에서는 구독작업이나 외부API를 호출하면 안됌,\r\n    super(props); // 권고하는 방식의 생성자 구현, this.props는 생성자 내에서 정의되지 않아 버그 발생 가능성 생김\r\n\r\n    this.state = {\r\n      //생성자 내에서는 setState의 호출이 아닌 this.state를 통해 초기값을 할당해줘야함\r\n      //생성자는 this.state를 직접 할당할 수 있지만 다른 곳에선 this.setState()를 사용\r\n      users: [],\r\n      message: null,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    //외부 API호출이 필요하면 사용함, 비동기통신, DOM 요소에 접근할 때\r\n    this.reloadUserList();\r\n  }\r\n  reloadUserList = () => {\r\n    //유저리스트 불러오기\r\n    ApiService.fetchUsers() //axios == api 통신 사용 프로토콜?\r\n        .then(res => {\r\n          this.setState({\r\n            users: res.data\r\n          })\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"reloadUserList() Errors!\", err);\r\n        })\r\n  }\r\n\r\n  deleteUser = (userID) => {\r\n    //유저 삭제\r\n    ApiService.deleteUser(userID) //api통신을 통해 DB에 있는 유저 삭제\r\n        .then(res => {\r\n          this.setState({\r\n            message: 'User Deleted Successfully.'\r\n          });\r\n          this.setState({\r\n            users: this.state.users.filter((user) => user.id !== userID)\r\n            //filter 기능을 통해 state에 있는 user배열에서 삭제된 해당 유저 id를 제외하고 다시 배열에 노출\r\n          })\r\n        })\r\n        .catch(err => {\r\n          console.log(\"deleteUser() Error!\", err);\r\n        })\r\n  }\r\n  editUser = (ID) => {\r\n    window.localStorage.setItem(\"userID\", ID);\r\n    //browser의 localstorage를 사용해 해당 유저 id를 일시적으로 저장, route를 통해 EditUserComponent.jsx로 이동\r\n    this.props.history.push(\"/edit-user\");\r\n    //route에서 /edit-user url로 이동하면 EditUserComponent.jsx 노출하도로 설정\r\n  };\r\n  addUser = () => {\r\n    window.localStorage.removeItem(\"userID\");\r\n    this.props.history.push('/add-user')\r\n  };\r\n\r\n  render() {\r\n    //컴포넌트를 정의할 때 무조건 사용해야한다.\r\n    //render함수 내부에서 setState를 호출하면 안됌 ==무한루프에 빠지게 함\r\n    //render함수 반환값은 속성값과 상태값만으로 결정되야함\r\n    //부수효과를 발생시키면 안됌 , 순수하게 렌더링만== 비동기 통신이안 쿠키사용 등\r\n    return (\r\n        <div>\r\n          <h2>User List</h2>\r\n          <button onClick={this.addUser}>Add User</button>\r\n          <table>\r\n            <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>FirstName</th>\r\n              <th>LastName</th>\r\n              <th>Email</th>\r\n              <th>Age</th>\r\n              <th>Salary</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.state.users.map(user =>\r\n                <tr key={user.id}>\r\n                  <td>{user.firstName}</td>\r\n                  <td>{user.lasgtName}</td>\r\n                  <td>{user.email}</td>\r\n                  <td>{user.age}</td>\r\n                  <td>{user.salary}</td>\r\n                  <td>\r\n                    <button onClick={() => this.editUser(user.id)}>Edit</button>\r\n                    <button onClick={() => this.deleteUser(user.id)}>Delete</button>\r\n                  </td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserListComponent;\r\n"]},"metadata":{},"sourceType":"module"}